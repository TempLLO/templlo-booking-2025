# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      <https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun>
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to AWS ECS 🌏

on:
  workflow_run:
    workflows: ["Run Test 🚀"]
    types:
    - completed


#  push:
#    branches: [ "main" ]
#    branches: [ "deploy/71/ecs-deploy" ]


env:
  AWS_REGION: ap-northeast-2                  # set this to your preferred AWS region, e.g. us-west-1
#  ECR_REPOSITORY: sparta-2024-g1/project-1         # set this to your Amazon ECR repository name
#  ECS_SERVICE: project-01-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: templlo-cluster  # set this to your Amazon ECS cluster name
#  ECS_TASK_DEFINITION: .github/workflows/project-01-task-revision1.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
#  CONTAINER_NAME: project-01-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read


jobs:
  changes:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    runs-on: ubuntu-latest
    outputs: # 이 job의 결과를 다른 job에서 사용할 수 있도록 output 설정
      matrix: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2 # 어떤 서비스 디렉토리가 변경되었는지 감지
        id: filter
        with:
          filters: |
            gateway:
              - 'gateway/**'
            eureka-server:
              - 'server/**'
            user:
              - 'com.templlo.service.user/**'
            promotion:
              - 'com.templlo.service.promotion/**'
            reservation:
              - 'com.templlo.service.reservation/**'
            temple:
              - 'com.templlo.service.temple/**'
            program:
              - 'com.templlo.service.program/**'
            review:
              - 'com.templlo.service.review/**'

  deploy:
    needs: changes
    if: ${{ needs.changes.outputs.matrix != '[]' }}

    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    strategy:
      fail-fast: false  # 하나의 서비스 실패해도 다른 서비스 계속 빌드
      matrix:
        service: ${{ fromJSON(needs.changes.outputs.matrix) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Debug logging matrix.service
      run: echo "${{ matrix.service }}"

    - name: Debug logging needs.changes.outputs.matrix
      run: echo "${{ needs.changes.outputs.matrix }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Build, tag, and push image to Amazon ECR
#      id: build-image
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY: templlo-2025-g1/${{ matrix.service }}
#        IMAGE_TAG: ${{ github.sha }}
#      run: |
#        # Build a docker container and
#        # push it to ECR so that it can
#        # be deployed to ECS.
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        ECS_TASK_DEFINITION: .github/workflows/task/templlo-${{ matrix.service }}-task-revision1.json
        CONTAINER_NAME: ${{ matrix.service }}-container
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: templlo-2025-g1/${{ matrix.service }}
        IMAGE_TAG: latest # ${{ github.sha }}
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      env:
        ECS_SERVICE: templlo-${{ matrix.service }}-service
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

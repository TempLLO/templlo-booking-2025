name: Run Test 🚀

on: #main을 타켓으로 PR 올리거나, main에 Merge 될 때 워크플로우 실행
  pull_request:
    #    branches: [ "main" ]
    branches: [ "deploy/71/ecs-deploy" ]
  push:
    #    branches: [ "main" ]
    branches: [ "deploy/71/ecs-deploy" ]


env:
  AWS_REGION: ap-northeast-2                  # set this to your preferred AWS region, e.g. us-west-1


jobs:

  changes-ci:
    runs-on: ubuntu-latest
    outputs: # 이 job의 결과를 다른 job에서 사용할 수 있도록 output 설정
      matrix: ${{ steps.filter.outputs.changes }}
      service-directory: ${{ steps.load-service-directory.outputs.service-directory }}
    steps:
      - uses: actions/checkout@v4
      - name: Load JSON and Generate Filters
        id: load-service-directory
        run: |
          # Load service-directory.json
          service_directory_json=$(cat .github/workflows/service-directory.json)
          
          # Generate service-directory
          #generated_service=$(echo "$service_directory_json" | jq -r -c '
          #  to_entries
          #  | map("\(.key):\n  - \(.value)")
          #  | join("\n")
          #')
          service_directory_map=$(echo "$service_directory_json" | jq -c 'to_entries | map({key: .key, value: (.value)}) | from_entries')
          
          echo "Generated service-directory:"
          #echo "$generated_path"
          echo "$service_directory_map"
          
          # Output the generated service-directory
          #echo "generated_filters=$generated_service" >> $GITHUB_OUTPUT
          echo "service-directory=$service_directory_map" >> $GITHUB_OUTPUT
        shell: bash

      - name: Apply Filters with Paths-Filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          #          filters: ${{ steps.load-service-directory.outputs.generated_filters }}
          filters: |
            gateway:
              - 'gateway/**'
            eureka-server:
              - 'server/**'
            user:
              - 'com.templlo.service.user/**'
            promotion:
              - 'com.templlo.service.promotion/**'
            reservation:
              - 'com.templlo.service.reservation/**'
            temple:
              - 'com.templlo.service.temple/**'
            program:
              - 'com.templlo.service.program/**'
            review:
              - 'com.templlo.service.review/**'

      - name: Use Filtered Results
        run: |
          echo "Filters Matched: ${{ steps.filter.outputs.changes }}"

  build:
    needs: changes-ci
    if: ${{ needs.changes-ci.outputs.matrix != '[]' }}
    name: Build and Test Services
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 하나의 서비스 실패해도 다른 서비스 계속 빌드
      matrix:
        service: ${{ fromJSON(needs.changes-ci.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
#
#      - name: Logging matrix.service
#        run: echo "${{ matrix.service }}"
#
#      - name: Logging needs.changes-ci.outputs.service-directory
#        run: echo "${{ needs.changes-ci.outputs.service-directory }}"

      - name: Get changed service directory from map
        id: get-changed
        run: |
          service_name=${{ matrix.service }}
          directory=$(echo '${{ needs.changes-ci.outputs.service-directory }}' | jq -r --arg key "$service_name" '.[$key]')
          echo "$directory"
          echo "directory=$directory" >> $GITHUB_OUTPUT

#      - name: Logging steps.get-changed.outputs.directory (from map)
#        run: echo "${{ steps.get-changed.outputs.directory }}"
#
#      - name: Logging steps.filter.outputs.changes
#        run: echo "${{ steps.filter.outputs.changes }}"


      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build and Test
        working-directory: ${{ steps.get-changed.outputs.directory }}
        run: |
          echo "Building ${{ steps.get-changed.outputs.directory }}"
          chmod +x gradlew
          ./gradlew clean build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-libs-${{ matrix.service }}
          path: ${{ steps.get-changed.outputs.directory }}/build/libs/*.jar

  upload_ecr:
    name: Upload to ECR
    needs: [changes-ci, build]
    if: ${{ needs.changes-ci.outputs.matrix != '[]' && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 하나의 서비스 실패해도 다른 서비스 계속 빌드
      matrix:
        service: ${{ fromJSON(needs.changes-ci.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get changed service directory from map
        id: get-changed
        run: |
          service_name=${{ matrix.service }}
          directory=$(echo '${{ needs.changes-ci.outputs.service-directory }}' | jq -r --arg key "$service_name" '.[$key]')
          echo "$directory"
          echo "directory=$directory" >> $GITHUB_OUTPUT

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-libs-${{ matrix.service }}
          path: ${{ steps.get-changed.outputs.directory }}/build/libs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ${{ steps.get-changed.outputs.directory }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: templlo-2025-g1/${{ matrix.service }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          pwd
          echo "[cur path file list]"
          ls
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT




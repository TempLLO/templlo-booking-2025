name: Run Test 🚀

on: #main을 타켓으로 PR 올리거나, main에 Merge 될 때 워크플로우 실행
  pull_request:
    #    branches: [ "main" ]
    branches: [ "deploy/71/ecs-deploy" ]
  push:
    #    branches: [ "main" ]
    branches: [ "deploy/71/ecs-deploy" ]

jobs:



  changes_ci:
    runs-on: ubuntu-latest
    outputs: # 이 job의 결과를 다른 job에서 사용할 수 있도록 output 설정
      matrix: ${{ steps.filter.outputs.changes }}
      service_names: ${{ steps.load-filters.outputs.service_names }}
    steps:
      - uses: actions/checkout@v4
      - name: Load JSON and Generate Filters
        id: load-filters
        run: |
          # Load filters.json
          filters=$(cat .github/workflows/filters.json)
          
          # Generate filters
          #generated_service=$(echo "$filters" | jq -r -c '
          #  to_entries
          #  | map("\(.key):\n  - \(.value)")
          #  | join("\n")
          #')
          service_name_map=$(echo "$filters" | jq -c 'to_entries | map({key: .key, value: (.value)}) | from_entries')
          
          echo "Generated Filters:"
          #echo "$generated_path"
          echo "$service_name"
          
          # Output the generated filters
          #echo "generated_filters=$generated_service" >> $GITHUB_OUTPUT
          echo "service_names=$service_name_map" >> $GITHUB_OUTPUT
        shell: bash

      #      - name: Debug Output
      #        run: |
      #          echo "Filters from load-filters:"
      #          echo "${{ steps.load-filters.outputs.generated_filters }}"
      #          echo "${{ steps.load-filters.outputs.generated_filters }}"

      - name: Apply Filters with Paths-Filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          #          filters: ${{ steps.load-filters.outputs.generated_filters }}
          filters: |
            gateway:
              - 'gateway/**'
            eureka-server:
              - 'server/**'
            user:
              - 'com.templlo.service.user/**'
            promotion:
              - 'com.templlo.service.promotion/**'
            reservation:
              - 'com.templlo.service.reservation/**'
            temple:
              - 'com.templlo.service.temple/**'
            program:
              - 'com.templlo.service.program/**'
            review:
              - 'com.templlo.service.review/**'
      - name: Use Filtered Results
        run: |
          echo "Filters Matched: ${{ steps.filter.outputs.changes }}"
  build:
    needs: changes_ci
    if: ${{ needs.changes_ci.outputs.matrix != '[]' }}
    name: Build and Test Services
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 하나의 서비스 실패해도 다른 서비스 계속 빌드
      matrix:
        service: ${{ fromJSON(needs.changes_ci.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Logging matrix.service
        run: echo "${{ matrix.service }}"

      - name: Logging needs.changes_ci.outputs.service_names
        run: echo "${{ needs.changes_ci.outputs.service_names }}"

      - name: Logging needs.changes_ci.outputs.service_names as map
        id: get-service-name
        run: |
          key=${{ matrix.service }}
          value=$(echo '${{ needs.changes_ci.outputs.service_names }}' | jq -r --arg key "$key" '.[$key]')
          echo "$value"
          echo "changed_service=$value" >> $GITHUB_OUTPUT
      - name: Logging needs.changes_ci.outputs.service_names as map - result
        run: echo "${{ steps.get-service-name.outputs.changed_service }}"

      - name: Logging steps.filter.outputs.changes
        run: echo "${{ steps.filter.outputs.changes }}"


      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build and Test
        working-directory: ${{ steps.get-service-name.outputs.changed_service }}
        run: |
          echo "Building ${{ matrix.service }}"
          chmod +x gradlew
          ./gradlew clean build
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-libs-${{ matrix.service }}
          path: ${{ steps.get-service-name.outputs.changed_service }}/build/libs/*.jar

#  upload_build_result:
#    name: Upload to ECR
#
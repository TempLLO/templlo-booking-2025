name: Run Test 🚀

on: #main을 타켓으로 PR 올리거나, main에 Merge 될 때 워크플로우 실행
  pull_request:
    branches: [ "main" ]
  push:
    # branches: [ "main" ]
    branches: [ "deploy/31/jaehee" ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs: # 이 job의 결과를 다른 job에서 사용할 수 있도록 output 설정
      matrix: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2 # 어떤 서비스 디렉토리가 변경되었는지 감지
        id: filter
        with:
          filters: |
            gateway:
              - 'gateway/**'
            server:
              - 'server/**'
            com.templlo.service.user:
              - 'com.templlo.service.user/**'
            com.templlo.service.promotion:
              - 'com.templlo.service.promotion/**'
            com.templlo.service.reservation:
              - 'com.templlo.service.reservation/**'
            com.templlo.service.temple:
              - 'com.templlo.service.temple/**'
            com.templlo.service.program:
              - 'com.templlo.service.program/**'
            com.templlo.service.review:
              - 'com.templlo.service.review/**'

  build:
    needs: changes
    if: ${{ needs.changes.outputs.matrix != '[]' }}
    name: Build and Test Services
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 하나의 서비스 실패해도 다른 서비스 계속 빌드
      matrix:
        service: ${{ fromJSON(needs.changes.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build
        working-directory: ${{ matrix.service }}
        run: |
          echo "Building ${{ matrix.service }}"
          chmod +x gradlew
          ./gradlew clean build -x test

      ## 도카파일 빌드해서 도커 이미지를 만드는 코드
      ## 만들어진 도커 이미지를 ECR에 push
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        id: set-env
        run: |
          if [ "${{ matrix.service }}" == "server" ]; then
            echo "EUREKA_SERVER_URL=${{ secrets.EUREKA_SERVER_URL }}" >> .env
            echo "EUREKA_HOSTNAME=${{ secrets.EUREKA_HOSTNAME }}" >> .env
          elif [ "${{ matrix.service }}" == "gateway" ]; then
            echo "EUREKA_SERVER_URL=${{ secrets.EUREKA_SERVER_URL }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
         # ECR_REGISTRY: ${{ env.AWS_ECR_URI }}
          ECR_REGISTRY: 354891846810.dkr.ecr.ap-northeast-2.amazonaws.com/templlo-booking-2025
        run: |
          # Convert service name to repository name
          if [ "${{ matrix.service }}" == "server" ]; then REPO_NAME="eureka-service"
          elif [ "${{ matrix.service }}" == "gateway" ]; then REPO_NAME="gateway-service"
          elif [ "${{ matrix.service }}" == "com.templlo.service.user" ]; then REPO_NAME="user-service"
          elif [ "${{ matrix.service }}" == "com.templlo.service.promotion" ]; then REPO_NAME="promotion-service"
          elif [ "${{ matrix.service }}" == "com.templlo.service.reservation" ]; then REPO_NAME="reservation-service"
          elif [ "${{ matrix.service }}" == "com.templlo.service.temple" ]; then REPO_NAME="temple-service"
          elif [ "${{ matrix.service }}" == "com.templlo.service.program" ]; then REPO_NAME="program-service"
          elif [ "${{ matrix.service }}" == "com.templlo.service.review" ]; then REPO_NAME="review-service"
          fi
          
          # Build Docker image with env vars
          docker build --build-arg ENV_FILE=.env -t $ECR_REGISTRY/$REPO_NAME:latest ./${{ matrix.service }}
          
          # Push Docker image # 이미지 푸쉬할때 타겟 레포지토리 어디로 감?? 태그명 가지고 알아서 찾아가는 듯.
          docker push $ECR_REGISTRY/$REPO_NAME:latest
          
          # Output the image URI for use in later steps
          echo "image=$ECR_REGISTRY/$REPO_NAME:latest" >> $GITHUB_OUTPUT